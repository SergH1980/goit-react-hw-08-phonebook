{"version":3,"file":"static/js/201.a75e658f.chunk.js","mappings":"kLAkBA,IAf0B,WACxB,OAA8BA,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACMC,EAAqB,kBAAMD,GAAW,SAAAD,GAAO,OAAKA,CAAL,GAAxB,EAU3B,MAAO,CAFWA,EAAO,kBANZA,GACX,SAAC,MAAD,CAAoBG,QAASD,EAAoBE,MAAM,UAEvD,SAAC,MAAD,CAAWD,QAASD,EAAoBE,MAAM,SAMjD,C,2LCRYC,EAAqBC,EAAAA,GAAAA,GAAH,+CAIlBC,GAAOD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,iSAWJG,EAAYH,EAAAA,GAAAA,MAAH,oEAKTI,GAAQJ,EAAAA,EAAAA,IAAOK,EAAAA,GAAPL,CAAH,sGAMLM,EAAeN,EAAAA,GAAAA,IAAH,+CAIZO,EAAeP,EAAAA,GAAAA,KAAH,kHAQZQ,EAAeR,EAAAA,GAAAA,OAAH,2eA2BZS,GAAeT,EAAAA,EAAAA,IAAOU,EAAAA,GAAPV,CAAH,uC,SCrDnBW,EAAcC,EAAAA,KAAaC,MAAM,CACrCC,KAAMF,EAAAA,KACHG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAHG,kCAINC,MAAON,EAAAA,KACJG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAHI,kCAIPE,SAAUP,EAAAA,KACPG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAHO,oCAMG,SAASG,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAgBC,EAAAA,EAAAA,IAAYC,EAAAA,IAC5BC,GAAQF,EAAAA,EAAAA,IAAYG,EAAAA,IAC1B,GAAwCC,EAAAA,EAAAA,KAAxC,eAAOC,EAAP,KAA0BC,EAA1B,KAEA,OACE,4BACE,SAAC/B,EAAD,UAAoB,6CAGpB,SAAC,KAAD,CACEgC,cAAe,CAAEjB,KAAM,GAAII,MAAO,GAAIC,SAAU,IAChDa,iBAAkBrB,EAClBsB,SAAU,SAACC,EAAD,GAAuC,EAAhBC,UAC/Bd,GACEe,EAAAA,EAAAA,IAAS,CACPtB,KAAMoB,EAAmBpB,KACzBI,MAAOgB,EAAmBhB,MAC1BC,SAAUe,EAAmBf,WAGlC,EAXH,UAaE,UAAClB,EAAD,YACE,SAACE,EAAD,CAAWkC,QAAQ,OAAnB,SAA0B,UAC1B,SAACjC,EAAD,CACEU,KAAK,OAELwB,MAAM,yIACNrB,UAAQ,KAEV,SAACR,EAAD,CAAcK,KAAK,OAAOyB,UAAU,SACpC,SAACpC,EAAD,CAAWkC,QAAQ,QAAnB,SAA2B,YAC3B,SAACjC,EAAD,CACEoC,KAAK,QACL1B,KAAK,QAELwB,MAAM,yIACNrB,UAAQ,KAEV,SAACR,EAAD,CAAcK,KAAK,QAAQyB,UAAU,SACrC,SAACpC,EAAD,CAAWkC,QAAQ,WAAnB,SAA8B,cAC9B,UAAC/B,EAAD,YACE,SAACF,EAAD,CACEoC,KAAMX,EACNf,KAAK,WAELwB,MAAM,+FACNrB,UAAQ,KAEV,SAACV,EAAD,UAAeuB,QAEjB,SAACrB,EAAD,CAAcK,KAAK,WAAWyB,UAAU,SACxC,SAAC/B,EAAD,CAAcM,KAAK,SAAS0B,KAAK,SAAjC,SACqB,aAAlBjB,GAAiCG,EAAjC,iCAMZ,CC9Fc,SAASe,IACtB,OAAO,SAACrB,EAAD,GACR,C","sources":["components/hooks/usePasswordToggle.js","components/RegistrationForm/RegistrationForm.styled.jsx","components/RegistrationForm/RegistrationForm.jsx","pages/Registration/Registration.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { AiFillEyeInvisible, AiFillEye } from 'react-icons/ai';\n\nconst usePasswordToggle = () => {\n  const [visible, setVisible] = useState(false);\n  const toChangeVisibility = () => setVisible(visible => !visible);\n\n  const Icon = visible ? (\n    <AiFillEyeInvisible onClick={toChangeVisibility} color=\"grey\" />\n  ) : (\n    <AiFillEye onClick={toChangeVisibility} color=\"grey\" />\n  );\n\n  const InputType = visible ? `text` : `password`;\n\n  return [InputType, Icon];\n};\n\nexport default usePasswordToggle;\n","import styled from 'styled-components';\n\nimport {\n  Form as FormStyle,\n  Field as FieldStyle,\n  ErrorMessage as ErrorMessageStyle,\n} from 'formik';\n\nexport const RegisterFormHeader = styled.h2`\n  text-align: center;\n`;\n\nexport const Form = styled(FormStyle)`\n  width: 600px;\n  display: flex;\n  flex-direction: column;\n  border-radius: 8px;\n  box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px,\n    rgba(0, 0, 0, 0.3) 0px 30px 60px -30px,\n    rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset;\n  padding: 20px 30px;\n`;\n\nexport const FormLabel = styled.label`\n  font-weight: 500;\n  margin-bottom: 5px;\n`;\n\nexport const Field = styled(FieldStyle)`\n  width: 100%;\n  margin-bottom: 2px;\n  height: 30px;\n  line-height: 30px;\n`;\nexport const PasswordWrap = styled.div`\n  position: relative;\n`;\n\nexport const PasswordIcon = styled.span`\n  position: absolute;\n  top: 8px;\n  right: 10px;\n  z-index: 1000;\n  cursor: pointer;\n`;\n\nexport const SubmitButton = styled.button`\n  max-width: 120px;\n  margin-top: 15px;\n  padding: 5px 10px;\n\n  border: none;\n  border-radius: 8px;\n\n  background-color: #1f86cf;\n  color: white;\n\n  box-shadow: rgba(50, 50, 93, 0.25) 0px 13px 27px -5px,\n    rgba(0, 0, 0, 0.3) 0px 8px 16px -8px;\n  transition-duration: 300ms;\n  transition-property: background-color, color;\n  cursor: pointer;\n\n  :hover {\n    background-color: #d7b7e4;\n    color: black;\n  }\n\n  :active {\n    color: black;\n  }\n`;\n\nexport const ErrorMessage = styled(ErrorMessageStyle)`\n  color: red;\n`;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { register } from 'redux/auth/authOperations';\nimport { selectAuthOperation, selectError } from 'redux/auth/authSelectors';\nimport usePasswordToggle from 'components/hooks/usePasswordToggle';\n\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\n\nimport {\n  Form,\n  FormLabel,\n  Field,\n  SubmitButton,\n  ErrorMessage,\n  RegisterFormHeader,\n  PasswordWrap,\n  PasswordIcon,\n} from './RegistrationForm.styled';\n\nconst SignupSchem = Yup.object().shape({\n  name: Yup.string()\n    .min(3, 'Too Short!')\n    .max(40, 'Too long!')\n    .required(`Please enter valid information`),\n  email: Yup.string()\n    .min(3, 'Too Short!')\n    .max(40, 'Too long!')\n    .required(`Please enter valid information`),\n  password: Yup.string()\n    .min(6, 'Too Short!')\n    .max(30, 'Too long!')\n    .required(`Please enter valid information`),\n});\n\nexport default function RegistrationForm() {\n  const dispatch = useDispatch();\n  const authOperation = useSelector(selectAuthOperation);\n  const error = useSelector(selectError);\n  const [PasswordInputType, ToggleIcon] = usePasswordToggle();\n\n  return (\n    <div>\n      <RegisterFormHeader>\n        To register, please fill out this form:\n      </RegisterFormHeader>\n      <Formik\n        initialValues={{ name: '', email: '', password: '' }}\n        validationSchema={SignupSchem}\n        onSubmit={(registrationValues, { resetForm }) => {\n          dispatch(\n            register({\n              name: registrationValues.name,\n              email: registrationValues.email,\n              password: registrationValues.password,\n            })\n          );\n        }}\n      >\n        <Form>\n          <FormLabel htmlFor=\"name\">Name</FormLabel>\n          <Field\n            name=\"name\"\n            // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n          <ErrorMessage name=\"name\" component=\"div\" />\n          <FormLabel htmlFor=\"email\">E-mail</FormLabel>\n          <Field\n            type=\"email\"\n            name=\"email\"\n            // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n          <ErrorMessage name=\"email\" component=\"div\" />\n          <FormLabel htmlFor=\"password\">Password</FormLabel>\n          <PasswordWrap>\n            <Field\n              type={PasswordInputType}\n              name=\"password\"\n              // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n            <PasswordIcon>{ToggleIcon}</PasswordIcon>\n          </PasswordWrap>\n          <ErrorMessage name=\"password\" component=\"div\" />\n          <SubmitButton name=\"submit\" type=\"submit\">\n            {authOperation === 'register' && !error ? `Loading...` : `Register`}\n          </SubmitButton>\n        </Form>\n      </Formik>\n    </div>\n  );\n}\n","import RegistrationForm from 'components/RegistrationForm/RegistrationForm';\n\nexport default function Registration() {\n  return <RegistrationForm />;\n}\n"],"names":["useState","visible","setVisible","toChangeVisibility","onClick","color","RegisterFormHeader","styled","Form","FormStyle","FormLabel","Field","FieldStyle","PasswordWrap","PasswordIcon","SubmitButton","ErrorMessage","ErrorMessageStyle","SignupSchem","Yup","shape","name","min","max","required","email","password","RegistrationForm","dispatch","useDispatch","authOperation","useSelector","selectAuthOperation","error","selectError","usePasswordToggle","PasswordInputType","ToggleIcon","initialValues","validationSchema","onSubmit","registrationValues","resetForm","register","htmlFor","title","component","type","Registration"],"sourceRoot":""}